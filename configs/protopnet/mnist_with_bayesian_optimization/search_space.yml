model:
  extractor:
    add_on:
      conv1:
        params:
          out_channels: [qrandint, 128, 512, 128] # Try different sizes for the embedding space

  similarity:
    name: [choice, LegacyProtoPNetSimilarity, ProtoPNetSimilarity] # Either original ProtoPNet similarity, or up-to-date version

  classifier:
    params:
      num_proto_per_class: [randint, 5, 10] # Try different numbers of prototypes per class

dataset:
  train_set:
    params:
      transform:
        random_order:
          transforms:
            affine:
              params:
                degrees: [randint, 15, 45] # Try stronger rotations

training:
  optimizers:
    warmup_optimizer:
      groups:
        warmup_group:
          lr: [uniform, 0.003, 0.03] # Try stronger learning rate during warmup

  num_epochs: [randint, 10, 15] # Maximum number of training epochs

  periods:
    warmup:
      num_epochs: [randint, 1, 5] # Try longer warmup period

  auxiliary_info:
    loss_coefficients:
      clustering: [uniform, 0.5, 0.8] # Put more or less emphasis on the clustering loss
